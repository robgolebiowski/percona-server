# This is complementary test to keyring_and_mk_encryption_exclusions. Here we check default_table_encryption and
# databases's DEFAULT ENCRYPTION exclusions.

SET GLOBAL default_table_encryption=ONLINE_TO_KEYRING;
CREATE DATABASE db_1;
SHOW CREATE DATABASE db_1;
USE db_1;
CREATE TABLE t1 (a varchar(255));
SHOW CREATE TABLE t1;

--let $assert_text= Make sure ENCRYPTION is set to Y in INFORMATION_SCHEMA.INNODB_TABLESPACES
--let $assert_cond= "[SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_TABLESPACES WHERE NAME=\\'db_1/t1\\' AND ENCRYPTION=\\'Y\\']" = 1
--source include/assert.inc

--let $assert_text= Make sure MIN_KEY_VERSION is set to 1 in INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION
--let $assert_cond= "[SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE NAME=\\'db_1/t1\\' AND MIN_KEY_VERSION=1]" = 1
--source include/assert.inc

# It should not be possible to create a database with DEFAULT_ENCRYPTION=Y/N while default_table_encryption is
# equal to ONLINE_TO_KEYRING
--error ER_DATABASE_ENCRYPTION_MK_KEYRING_MISMATCH
CREATE DATABASE db_2 DEFAULT ENCRYPTION='Y';

--error ER_DATABASE_ENCRYPTION_N_KEYRING_MISMATCH
CREATE DATABASE db_2 DEFAULT ENCRYPTION='N';

# It should not be possible to ATLER database DEFAULT_ENCRYPTION to Y/N while default_table_encryption is
# equal to ONLINE_TO_KEYRING
USE test;
--error ER_DATABASE_ENCRYPTION_MK_KEYRING_MISMATCH
ALTER DATABASE db_1 DEFAULT ENCRYPTION='Y';

--error ER_DATABASE_ENCRYPTION_N_KEYRING_MISMATCH
ALTER DATABASE db_1 DEFAULT ENCRYPTION='N';

USE db_1;
# Now let's create database with DEFAULT ENCRYPTION='Y' and then change the default_table_encryption to
# ONLINE_TO_KEYRING

SET SESSION default_table_encryption=ON;
CREATE DATABASE db_2;
SHOW CREATE DATABASE db_2;

SET GLOBAL default_table_encryption=ONLINE_TO_KEYRING;
# Now we try to create a table in db_2 database that will inherit ENCRYPTION='Y' from db_2's DEFAULT ENCRYPTION.
# This should fail - as it is not possible to create MK encrypted tables while ONLINE_TO_KEYRING is set.
USE db_2;
--error ER_KEYRING_ILLEGAL_ENCRYPTION_OPTION
CREATE TABLE t1 (a varchar(255));

# We should be able to create tables in this database when ONLINE_FROM_KEYRING_TO_UNENCRYPTED is set.
# We are decrypting only ONLINE keyring encrypted tables - so it does not collide with creating new
# Master Key encrypted tables.
SET GLOBAL default_table_encryption=ONLINE_FROM_KEYRING_TO_UNENCRYPTED;
CREATE TABLE t1 (a varchar(255));

CREATE DATABASE db_3 DEFAULT ENCRYPTION='N';
USE db_3;
# Only tables with explicit ENCRYPTION='N' are excluded from online encryption.
SET GLOBAL default_table_encryption=ONLINE_TO_KEYRING;
CREATE TABLE t1 (a varchar(255));
CREATE TABLE t2 (a varchar(255)) ENCRYPTION='N';
# t1 should get encrypted - as its ENCRYPTION='N' was inherited, i.e. was not set explicitly
# and t2 should stay unencrypted - as its ENCRYPTION='N' was set explicitly.
--let $assert_text= Make sure ENCRYPTION is set to Y in INFORMATION_SCHEMA.INNODB_TABLESPACES for db_3/t1
--let $assert_cond= "[SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_TABLESPACES WHERE NAME=\\'db_3/t1\\' AND ENCRYPTION=\\'Y\\']" = 1
--source include/assert.inc
--let $assert_text= Make sure MIN_KEY_VERSION is set to 1 in INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION for db_3/t1
--let $assert_cond= "[SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE NAME=\\'db_3/t1\\' AND MIN_KEY_VERSION=1]" = 1
--source include/assert.inc
--let $assert_text= Make sure ENCRYPTION is set to N in INFORMATION_SCHEMA.INNODB_TABLESPACES for db_3/t2
--let $assert_cond= "[SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_TABLESPACES WHERE NAME=\\'db_3/t2\\' AND ENCRYPTION=\\'N\\']" = 1
--source include/assert.inc
--let $assert_text= Make sure EXCLUDED is set to Y in INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION for db_3/t2
--let $assert_cond= "[SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE NAME=\\'db_3/t2\\' AND EXCLUDED=\\'Y\\']" = 1
--source include/assert.inc

SET GLOBAL default_table_encryption=ONLINE_FROM_KEYRING_TO_UNENCRYPTED;
CREATE TABLE t3 (a varchar(255));
--let $assert_text= Make sure ENCRYPTION is set to N in INFORMATION_SCHEMA.INNODB_TABLESPACES for db_3/t3
--let $assert_cond= "[SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_TABLESPACES WHERE NAME=\\'db_3/t3\\' AND ENCRYPTION=\\'N\\']" = 1
--echo # Make sure db_3/t3 is not included in INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION as it was never encrypted nor
--echo # excluded from encryption threads.
--let $assert_text= Make sure db_3/t3 is not included in INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION
--let $assert_cond= "[SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE NAME=\\'db_3/t3\\']" = 0
--source include/assert.inc

SET GLOBAL default_table_encryption=ONLINE_FROM_KEYRING_TO_UNENCRYPTED;
CREATE DATABASE db_4 DEFAULT ENCRYPTION='Y';
USE db_4;
CREATE TABLE t1 (a varchar(255));
--let $assert_text= Make sure ENCRYPTION is set to Y in INFORMATION_SCHEMA.INNODB_TABLESPACES for db_4/t1
--let $assert_cond= "[SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_TABLESPACES WHERE NAME=\\'db_4/t1\\' AND ENCRYPTION=\\'Y\\']" = 1
--echo # Make sure db_4/t1 is not included in INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION as it is
--echo # MK encrypted.
--let $assert_text= Make sure db_4/t1 is not included in INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION
--let $assert_cond= "[SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE NAME=\\'db_4/t1\\']" = 0
--source include/assert.inc

CREATE DATABASE db_5 DEFAULT ENCRYPTION='N';
USE db_5;
CREATE TABLE t1 (a varchar(255));
--let $assert_text= Make sure ENCRYPTION is set to N in INFORMATION_SCHEMA.INNODB_TABLESPACES for db_5/t1
--let $assert_cond= "[SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_TABLESPACES WHERE NAME=\\'db_5/t1\\' AND ENCRYPTION=\\'N\\']" = 1
--echo # Make sure db_5/t1 is not included in INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION as it is
--echo # MK encrypted.
--let $assert_text= Make sure db_5/t1 is not included in INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION
--let $assert_cond= "[SELECT COUNT(*) FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION WHERE NAME=\\'db_5/t1\\']" = 0
--source include/assert.inc

CREATE USER u1@localhost;
GRANT CREATE,ALTER,DROP on db_5.* TO u1@localhost;
GRANT CREATE,ALTER,INSERT on db_4.* TO u1@localhost;
USE db_5;
CREATE TABLE t_keyring (a varchar(255)) ENCRYPTION='KEYRING';
USE db_4;
CREATE TABLE t_mk (a varchar(255)) ENCRYPTION='Y';
CREATE TABLESPACE ts_mk ADD DATAFILE 'ts_mk.ibd' ENCRYPTION='Y';
CREATE TABLE t1_in_ts_mk (a varchar(255)) TABLESPACE=ts_mk ENCRYPTION='Y';
CREATE TABLE t2_in_ts_mk (a varchar(255)) TABLESPACE=ts_mk ENCRYPTION='Y';
#CREATE TABLESPACE ts_keyring_db_4 ADD DATAFILE 'ts_keyring_db_4.ibd';
#CREATE TABLE t1_in_ts_keyring_db_4 (a varchar(255)) TABLESPACE=ts_keyring_db_4;
USE db_5;
CREATE TABLESPACE ts_mk_db_5 ADD DATAFILE 'ts_mk_db_5.ibd' ENCRYPTION='Y';
CREATE TABLE t_mk_in_ts_mk_db_5 (a varchar(255)) TABLESPACE=ts_mk_db_5 ENCRYPTION='Y';
SET GLOBAL default_table_encryption=ONLINE_TO_KEYRING;
CREATE TABLESPACE ts_keyring ADD DATAFILE 'ts_keyring.ibd';
CREATE TABLE t1_keyring_in_ts_keyring (a varchar(255)) TABLESPACE=ts_keyring;
CREATE TABLE t2_keyring_in_ts_keyring (a varchar(255)) TABLESPACE=ts_keyring;
CREATE TABLE t3_keyring_in_ts_keyring (a varchar(255)) TABLESPACE=ts_keyring;
CREATE TABLESPACE ts_keyring_db_5 ADD DATAFILE 'ts_keyring_db_5.ibd';
CREATE TABLE t1_in_ts_keyring_db_5 (a varchar(255)) TABLESPACE=ts_keyring_db_5;
CREATE TABLESPACE ts_encryption_n ADD DATAFILE 'ts_encryption_n.ibd' ENCRYPTION='N';
SET GLOBAL default_table_encryption=OFF;

SELECT TABLE_SCHEMA, TABLE_NAME, CREATE_OPTIONS FROM INFORMATION_SCHEMA.TABLES
       WHERE CREATE_OPTIONS LIKE '%ENCRYPTION%';

USE db_4;
SET GLOBAL table_encryption_privilege_check=true;
connect (con1, localhost, u1);
--error ER_CANNOT_SET_TABLE_ENCRYPTION
ALTER TABLE db_5.t_keyring RENAME db_4.t_keyring;
--error ER_CANNOT_SET_TABLE_ENCRYPTION
RENAME TABLE db_5.t_keyring TO db_4.t_keyring;
# Change encryption type of MK encrypted table in database with
# default_table_encryption='Y'
ALTER TABLE db_4.t_mk ENCRYPTION='KEYRING';
# We should be able to move a table from MK encrypted tablespace
# into KEYRING encrypted file-per-table tablespace.
ALTER TABLE db_4.t1_in_ts_mk TABLESPACE=innodb_file_per_table ENCRYPTION='KEYRING';
# We should be able to move a table from Keyring encrypted tablespace
# into MK encrypted file-per-table tablespace.
ALTER TABLE db_5.t1_keyring_in_ts_keyring TABLESPACE=innodb_file_per_table ENCRYPTION='Y';
# It should also be possible to move to table from Keyring encrypted tablespace to
# not encrypted file_per_table
ALTER TABLE db_5.t2_keyring_in_ts_keyring TABLESPACE=innodb_file_per_table ENCRYPTION='N';
# It should NOT be possible to move to table from Keyring encrypted tablespace to
# not encrypted general tablespace, even if ENCRYPTION clause is specified (upstream behavior).
--error ER_TARGET_TABLESPACE_UNENCRYPTED
ALTER TABLE db_5.t3_keyring_in_ts_keyring TABLESPACE=ts_encryption_n ENCRYPTION='N';

SELECT TABLE_SCHEMA, TABLE_NAME, CREATE_OPTIONS FROM INFORMATION_SCHEMA.TABLES
       WHERE CREATE_OPTIONS LIKE '%ENCRYPTION%';

#SET GLOBAL debug= '+d,do_the_assert';
--error ER_INVALID_ENCRYPTION_REQUEST
ALTER TABLE db_5.t_mk_in_ts_mk_db_5 TABLESPACE=ts_keyring_db_5;
ALTER TABLE db_5.t_mk_in_ts_mk_db_5 TABLESPACE=ts_keyring_db_5 ENCRYPTION='KEYRING';

ALTER TABLE db_5.t1_in_ts_keyring_db_5 TABLESPACE=ts_mk_db_5;

connection default;
disconnect con1;
DROP USER u1@localhost;

SET GLOBAL table_encryption_privilege_check=false;
# cleanup
SET GLOBAL default_table_encryption=OFF;
DROP DATABASE db_1;
DROP DATABASE db_2;
DROP DATABASE db_3;
DROP DATABASE db_4;
DROP DATABASE db_5;
