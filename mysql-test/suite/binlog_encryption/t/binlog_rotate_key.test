--source include/have_debug.inc

--echo # Currently binlog is disabled. After initializing check_consecutive_binlog_key_versions we will restart the
--echo # server with binlog enabled. check_consecutive_binlog_key_versions will make sure that a new version of
--echo # percona_binlog key is used after each rotate_system_key followed by FLUSH LOGS calls.
SET SESSION debug="+d,check_consecutive_binlog_key_versions";

--let $restart_parameters=restart:--log-bin=master-bin
--source include/restart_mysqld.inc

--echo # master-bin.000002

SELECT 1;
SELECT 2;

--let $assert_text= Successfull rotation of percona_binlog
--let $assert_cond= "[SELECT rotate_system_key\\(\\"percona_binlog\\"\\) = 1]" = 1
--source include/assert.inc

FLUSH LOGS;

--echo # master-bin.000003

SELECT 3;
SELECT 4;

--let $assert_text= Successfull rotation of percona_binlog
--let $assert_cond= "[SELECT rotate_system_key\\(\\"percona_binlog\\"\\) = 1]" = 1
--source include/assert.inc

FLUSH LOGS;

--echo # master-bin.000004

FLUSH LOGS;
SELECT 5;
SELECT 6;

FLUSH LOGS;

--echo # master-bin.000005

SET SESSION debug="-d,check_consecutive_binlog_key_versions";

# First check that each binlog is encrypted by trying to decrypt it using mysqlbinlog
let datadir=`select @@datadir`;
let filename= master-bin.000002;
let local=$datadir/$filename;
let outfile=$MYSQLTEST_VARDIR/tmp/binlog_master;
--error 1
exec $MYSQL_BINLOG $local --hexdump > $outfile;
let filename= master-bin.000003;
let local=$datadir/$filename;
--error 1
exec $MYSQL_BINLOG $local --hexdump >> $outfile;
let filename= master-bin.000004;
let local=$datadir/$filename;
--error 1
exec $MYSQL_BINLOG $local --hexdump >> $outfile;

# Check that each generated binlog can be read by the server by using mysqlbinlog  with --read-from-remote-server
# option
let filename= master-bin.000002;
let remote=--read-from-remote-server --protocol=tcp --host=127.0.0.1 --port=$MASTER_MYPORT -uroot $filename;
let outfile=$MYSQLTEST_VARDIR/tmp/binlog_master-000001;
exec $MYSQL_BINLOG --hexdump $remote >> $outfile;

let filename= master-bin.000003;
let remote=--read-from-remote-server --protocol=tcp --host=127.0.0.1 --port=$MASTER_MYPORT -uroot $filename;
let outfile=$MYSQLTEST_VARDIR/tmp/binlog_master-000001;
exec $MYSQL_BINLOG --hexdump $remote >> $outfile;

let filename= master-bin.000004;
let remote=--read-from-remote-server --protocol=tcp --host=127.0.0.1 --port=$MASTER_MYPORT -uroot $filename;
let outfile=$MYSQLTEST_VARDIR/tmp/binlog_master-000001;
exec $MYSQL_BINLOG --hexdump $remote >> $outfile;

# Turning off binlog encryption to check if server can decrypt binlog with different percona_binlog keys versions
# while not encrypting binary log
--let $restart_parameters=restart:--log-bin=master-bin --encrypt-binlog=0
--source include/restart_mysqld.inc

--echo #master-bin.000006

SELECT 7;
SELECT 8;

FLUSH LOGS;

--echo #master-bin.000007

# Check that current master-bin is not encrypted by reading it with mysqlbinlog
let filename= master-bin.000006;
let local=$datadir/$filename;
exec $MYSQL_BINLOG $local --hexdump > $outfile;

# Check that binlog encrypted with different percona_binlog key versions can be read by the server

let remote=--read-from-remote-server --protocol=tcp --host=127.0.0.1 --port=$MASTER_MYPORT -uroot $filename;
let outfile=$MYSQLTEST_VARDIR/tmp/binlog_master-000001;
exec $MYSQL_BINLOG --hexdump $remote >> $outfile;

let filename= master-bin.000003;
let remote=--read-from-remote-server --protocol=tcp --host=127.0.0.1 --port=$MASTER_MYPORT -uroot $filename;
let outfile=$MYSQLTEST_VARDIR/tmp/binlog_master-000001;
exec $MYSQL_BINLOG --hexdump $remote >> $outfile;

let filename= master-bin.000004;
let remote=--read-from-remote-server --protocol=tcp --host=127.0.0.1 --port=$MASTER_MYPORT -uroot $filename;
let outfile=$MYSQLTEST_VARDIR/tmp/binlog_master-000001;
exec $MYSQL_BINLOG --hexdump $remote >> $outfile;

--echo # Check that only percona_binlog key can be rotated with rotate_system_key. This part of the test needs updating
--echo # each time a new system key is added.

--let $assert_text= It should not be possible to rotate key percona_binlog:
--let $assert_cond= "[SELECT rotate_system_key\\(\\"percona_binlog:\\"\\) = 0]" = 1
--source include/assert.inc

--let $assert_text= It should not be possible to rotate key percona_key
--let $assert_cond= "[SELECT rotate_system_key\\(\\"percona_key\\"\\) = 0]" = 1
--source include/assert.inc

--let $assert_text= It should not be possible to rotate key percona_123
--let $assert_cond= "[SELECT rotate_system_key\\(\\"percona_123\\"\\) = 0]" = 1
--source include/assert.inc

--let $assert_text= It should not be possible to rotate key percona_bin
--let $assert_cond= "[SELECT rotate_system_key\\(\\"percona_bin\\"\\) = 0]" = 1
--source include/assert.inc

--let $assert_text= It should not be possible to rotate key percona_b
--let $assert_cond= "[SELECT rotate_system_key\\(\\"percona_b\\"\\) = 0]" = 1
--source include/assert.inc

--let $assert_text= It should not be possible to rotate key percona_
--let $assert_cond= "[SELECT rotate_system_key\\(\\"percona_\\"\\) = 0]" = 1
--source include/assert.inc

--let $assert_text= It should not be possible to rotate key percona
--let $assert_cond= "[SELECT rotate_system_key\\(\\"percona\\"\\) = 0]" = 1
--source include/assert.inc

--let $assert_text= It should not be possible to rotate key system_key
--let $assert_cond= "[SELECT rotate_system_key\\(\\"system_key\\"\\) = 0]" = 1
--source include/assert.inc

--let $assert_text= It should not be possible to rotate key system_key
--let $assert_cond= "[SELECT rotate_system_key\\(\\"system_key\\"\\) = 0]" = 1
--source include/assert.inc

--let $assert_text= It should not be possible to rotate key system_key
--let $assert_cond= "[SELECT rotate_system_key\\(\\"123\\"\\) = 0]" = 1
--source include/assert.inc
