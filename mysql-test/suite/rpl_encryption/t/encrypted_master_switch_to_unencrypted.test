# The test starts with unencrypted master.
# It stops replication, generates a few statement and row events
# on the master, then restarts the server with encrypted binlog,
# generates some more events and restarts it back without encryption
# (no encryption plugin).
# Then it resumes replication and checks what happens when the server
# tries to feed the binary logs (included the encrypted ones)
# to the slave.
#

# This testcase is trying to use invalid key to decrypt binlog. The server should recognize that
# decrypted event is invalid by checking the event's checksum (the event is ivalid as we get
# garbage from decrypt function when invalid key is used). However, the "checksum checking code"
# has some asserts that can fail when the code tries to interpret the garbage data as a valid event.
# For instance it can happen that garbage data gets interpreted as Format_description_event
# and for such event there is an assert that checksum is ON. That assert can fail.
--source include/have_nodebug.inc
--source include/have_binlog_format_mixed.inc

--echo #################
--echo # Initialization
--echo #################

--source include/master-slave.inc
--enable_connect_log

# We stop replication because we want it to happen after the switch

--connection slave
call mtr.add_suppression("Event crc check failed! Most likely there is event corruption");

--disable_connect_log
--source include/stop_slave.inc
--enable_connect_log

--echo #####################################################
--echo # Part 1: unencrypted master
--echo #####################################################

--connection master
call mtr.add_suppression("Got fatal error 1236 from master when reading data from binary log: 'event read from binlog did not pass crc check");
call mtr.add_suppression("Event crc check failed! Most likely there is event corruption");
call mtr.add_suppression("Error reading GTIDs from binary log");

--let $master_datadir= `SELECT @@datadir`

CREATE TABLE table1_no_encryption (
  pk INT AUTO_INCREMENT PRIMARY KEY,
  ts TIMESTAMP NULL,
  b BLOB
);

INSERT INTO table1_no_encryption VALUES (NULL,NOW(),'data_no_encryption');
INSERT INTO table1_no_encryption SELECT NULL,NOW(),b FROM table1_no_encryption;
FLUSH BINARY LOGS;
SET binlog_format=ROW;
INSERT INTO table1_no_encryption SELECT NULL,NOW(),b FROM table1_no_encryption;
INSERT INTO table1_no_encryption SELECT NULL,NOW(),b FROM table1_no_encryption;

--echo # Make sure that binary logs are not encrypted

--let PRINT_SEARCH_RESULT=1
--let SEARCH_RANGE = 500000
--let SEARCH_FILE= $master_datadir/master-bin.0*
--let SEARCH_PATTERN= table1_no_encryption
--source include/search_pattern_in_file.inc

# We are storing the position now, because up to this point the slave
# should be able to synchronize with master
--source include/save_master_pos.inc

--echo #####################################################
--echo # Part 2: restart master, now with binlog encryption
--echo #####################################################

--let $rpl_server_parameters= --encrypt-binlog=1 --early-plugin-load=$KEYRING_PLUGIN --keyring_file_data=$MYSQL_TMP_DIR/keyring/keys.txt
--let $rpl_server_number= 1
--let $rpl_omit_print_server_parameters= 1
--source include/rpl_restart_server.inc

CREATE TABLE table2_to_encrypt (
  pk INT AUTO_INCREMENT PRIMARY KEY,
  ts TIMESTAMP NULL,
  b BLOB
);

INSERT INTO table2_to_encrypt VALUES (NULL,NOW(),'data_to_encrypt');
INSERT INTO table2_to_encrypt SELECT NULL,NOW(),b FROM table2_to_encrypt;
FLUSH BINARY LOGS;
SET binlog_format=ROW;
INSERT INTO table2_to_encrypt SELECT NULL,NOW(),b FROM table2_to_encrypt;
INSERT INTO table2_to_encrypt SELECT NULL,NOW(),b FROM table2_to_encrypt;

--echo # Make sure that binary logs are encrypted

--let SEARCH_FILE= $master_datadir/master-bin.0*
--let SEARCH_PATTERN= table2_to_encrypt
--source include/search_pattern_in_file.inc

--echo #####################################################
--echo # Part 3: restart master again without encryption
--echo #####################################################

# After the restart master will look for Previous GTIDs in previous binlog files.
# We are using incorrect key as we are fetching percona binlog key from different keyring than
# before the restart. master-verify-checksum should help us detect that the encrypted events
# are incorrect as checksum will not be correct. However the checksum algorithm is fetched
# from the event itself

--let $rpl_server_parameters= --encrypt-binlog=0
--let $rpl_server_number= 1
--source include/rpl_restart_server.inc

CREATE TABLE table3_no_encryption (
  pk INT AUTO_INCREMENT PRIMARY KEY,
  ts TIMESTAMP NULL,
  b BLOB
);

INSERT INTO table3_no_encryption VALUES (NULL,NOW(),'data_no_encryption');
INSERT INTO table3_no_encryption SELECT NULL,NOW(),b FROM table3_no_encryption;
INSERT INTO table3_no_encryption SELECT NULL,NOW(),b FROM table3_no_encryption;

--echo #####################################################
--echo # Check: resume replication and check how it goes
--echo #####################################################

--connection slave
start slave;
# The slave should be able to synchronize with master up to
# the previously saved position (when the log was still unencrypted)
--source include/sync_slave_sql.inc

--connection master
# Now save the current position and make slave to try to syncrhonize.
# It shouldn't work, the slave IO thread is expected to abort with an error
--source include/save_master_pos.inc

--connection slave
--let slave_io_errno=1236
--source include/wait_for_slave_io_error.inc

--sorted_result
SHOW TABLES;

--disable_connect_log
--source include/stop_slave.inc
--enable_connect_log
RESET SLAVE;

--echo ##########
--echo # Cleanup
--echo ##########

--connection master

SELECT COUNT(*) FROM table1_no_encryption;
SELECT COUNT(*) FROM table2_to_encrypt;
SELECT COUNT(*) FROM table3_no_encryption;
DROP TABLE table1_no_encryption, table2_to_encrypt, table3_no_encryption;
RESET MASTER;

--connection slave
--disable_connect_log
--source include/start_slave.inc
DROP TABLE table1_no_encryption;

--connection master
--source include/rpl_end.inc
