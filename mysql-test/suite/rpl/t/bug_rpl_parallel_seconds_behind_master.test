-- source include/master-slave.inc

--echo #
--echo # Bug #84415: slave don't report Seconds_Behind_Master when
--echo # running slave_parallel_workers > 0
--echo #

# make the test only run once (STMT is actually needed because we rely
# on SHOW PROCESS LIST output in some of the tests)
--source include/have_binlog_format_statement.inc

# restart slave in MTS mode
connection slave;
source include/stop_slave.inc;
SET @save.slave_parallel_workers= @@global.slave_parallel_workers;
SET @@global.slave_parallel_workers= 4;
SET @save.slave_checkpoint_period= @@global.slave_checkpoint_period;
SET @@global.slave_checkpoint_period= 500; # 0.5 sec
# to avoid warnings
SET @save.slave_transaction_retries= @@global.slave_transaction_retries;
--source include/start_slave.inc

# 1st scenario. slave executes insert to t1 and is blocked due to lock on t1, after 3s another worker
# on slave starts to execute insert to t2, this worker is also blocked on insert to t2. After 2 more 
# seconds we check Seconds_Behind_Master. Since worker is still  executing insert to t1 thise means
# that slave is at least 5s behind master (might be more due to slow network connection).

CREATE USER test;
GRANT ALL ON *.* TO test;
connect (slave2,127.0.0.1,test,,test,$SLAVE_MYPORT,);
connection master;

--disable_query_log
call mtr.add_suppression('.*Unsafe statement written to the binary log using statement format since BINLOG_FORMAT = STATEMENT.*');
--enable_query_log

CREATE TABLE t1 (f1 INT) ENGINE=INNODB;
CREATE DATABASE test2;
USE test2;
CREATE TABLE t2 (f1 INT) ENGINE=INNODB;
--source include/sync_slave_sql_with_master.inc

connection slave1;
LOCK TABLE test.t1 WRITE;

connection slave2;
LOCK TABLE test2.t2 WRITE;  # to block 2nd trans

connection master;

let $start= `SELECT UNIX_TIMESTAMP()`;

USE test;
INSERT INTO t1 VALUES (1);

real_sleep 3;
USE test2;
INSERT INTO t2 VALUES (1);
real_sleep 2;

#
# all events are in relay-log
#
source include/sync_slave_io_with_master.inc;

connection slave;
--source include/start_slave_sql.inc

# $upper_bound = "timestamp on slave after reading Seconds_Behind_Master" -
# "timestamp on master defore the delete statement"

let $sbm= query_get_value("SHOW SLAVE STATUS", Seconds_Behind_Master, 1);
let $stop= `SELECT UNIX_TIMESTAMP()`;
let $upper_bound= `SELECT $stop - $start`;
let $assert_text= Seconds_Behind_Master must be between 5 and 'upper_bound';
let $assert_cond= 5 <= $sbm AND $sbm <= $upper_bound;
source include/assert.inc;

connection slave1;
UNLOCK TABLES;

# Now the first worker which was 5s behind the master has completed its task. However the second
# worker is still running its task. This means that Seconds_Behind_Master should now be 2s or slightly
# more.

let $stop= `SELECT UNIX_TIMESTAMP()`;
let $upper_bound= `SELECT $stop - $start`;
let $assert_text= Seconds_Behind_Master must be between 2 and 'upper_bound';
let $assert_cond= 2 <= $sbm AND $sbm <= $upper_bound;
source include/assert.inc;

connection slave2;
UNLOCK TABLES;

--connection master
--source include/sync_slave_sql_with_master.inc

# Now both workers have compeleted their tasks and no new tasks have arrived, thus
# Seconds_Behind_Master should be equal to 0.

let $sbm= query_get_value("SHOW SLAVE STATUS", Seconds_Behind_Master, 1);
let $assert_text= Seconds_Behind_Master must be 0;
let $assert_cond= $sbm = 0;
source include/assert.inc;

# 2nd scenario. In this scenario we check if Seconds_Behind_Master is updated correctly when first
# worker compeletes its tasks first.

connection slave2;
LOCK TABLE test2.t2 WRITE;  # to block 2nd trans

connection master;

let $start= `SELECT UNIX_TIMESTAMP()`;

USE test;
INSERT INTO t1 VALUES (1);

real_sleep 3;

USE test2;
INSERT INTO t2 VALUES (1);
real_sleep 2;

#
# all events are in relay-log
#
source include/sync_slave_io_with_master.inc;

# First worker has completed its task, second one is still running. We should be 2 seconds behind the
# master.

let $sbm= query_get_value("SHOW SLAVE STATUS", Seconds_Behind_Master, 1);
let $stop= `SELECT UNIX_TIMESTAMP()`;
let $upper_bound= `SELECT $stop - $start`;
let $assert_text= Seconds_Behind_Master must be between 2 and 'upper_bound';
let $assert_cond= 2 <= $sbm AND $sbm <= $upper_bound;
source include/assert.inc;

connection slave2;
UNLOCK TABLES;

--connection master
--source include/sync_slave_sql_with_master.inc

# Now both workers have compeleted their tasks and no new tasks have arrived, thus
# Seconds_Behind_Master should be equal to 0.

let $sbm= query_get_value("SHOW SLAVE STATUS", Seconds_Behind_Master, 1);
let $assert_text= Seconds_Behind_Master must be 0;
let $assert_cond= $sbm = 0;
source include/assert.inc;

# 3rd scenario. Three workers are running. In this scenario we check if correct Seconds_Behind_Master
# is calculated when second worker completes first.   

--connection master

CREATE DATABASE test3;
USE test3;
CREATE TABLE t3 (f1 INT) ENGINE=INNODB;
--source include/sync_slave_sql_with_master.inc

connect (slave3,127.0.0.1,test,,test,$SLAVE_MYPORT,);

connection slave1;
LOCK TABLE test.t1 WRITE;

connection slave3;
LOCK TABLE test3.t3 WRITE; 

connection master;

let $start= `SELECT UNIX_TIMESTAMP()`;

USE test;
INSERT INTO t1 VALUES (1);

real_sleep 3;
use test2;
INSERT INTO t2 VALUES (1);
real_sleep 2;

USE test3;
# 2nd transaction to block Coordinator from resetting SBM
INSERT INTO t3 VALUES (1);
real_sleep 2;

source include/sync_slave_io_with_master.inc;

# Only second worker has completed. This means that longest running worker is the first one, thus
# slave should be 7s behind the master.

###TO REMOVE
SHOW PROCESSLIST;
query_vertical SHOW SLAVE STATUS;
###

let $sbm= query_get_value("SHOW SLAVE STATUS", Seconds_Behind_Master, 1);
let $stop= `SELECT UNIX_TIMESTAMP()`;
let $upper_bound= `SELECT $stop - $start`;
let $assert_text= Seconds_Behind_Master must be between 7 and 'upper_bound';
let $assert_cond= 7 <= $sbm AND $sbm <= $upper_bound;
source include/assert.inc;

connection slave1;
UNLOCK TABLES;

connection slave3;
UNLOCK TABLES;

--connection master
--source include/sync_slave_sql_with_master.inc

# Now all three workers have completed. Seconds_Behind_Master should be 0.

let $sbm= query_get_value("SHOW SLAVE STATUS", Seconds_Behind_Master, 1);
let $assert_text= Seconds_Behind_Master must be 0;
let $assert_cond= $sbm = 0;
source include/assert.inc;


##
# cleanup
##
connection master;
DROP TABLE test.t1;
DROP DATABASE test2;
DROP DATABASE test3;

--source include/sync_slave_sql_with_master.inc

connection slave;
DROP USER test;

SET @@global.slave_checkpoint_period= @save.slave_checkpoint_period;
SET @@global.slave_parallel_workers= @save.slave_parallel_workers;
SET @@global.slave_transaction_retries= @save.slave_transaction_retries;

--source include/rpl_end.inc

